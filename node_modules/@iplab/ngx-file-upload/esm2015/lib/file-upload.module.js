/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * l10n
 *
 * By Ivan Pintar, http://www.pintar-ivan.com
 * Licensed under the MIT License
 * See https://github.com/pIvan/file-upload/blob/master/README.md
 */
import { NgModule, Injector } from '@angular/core';
import { ReactiveFormsModule, FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { FileUploadComponent } from './components/file-upload.component';
import { FileUploadListItemComponent } from './components/file-upload-list-item.component';
import { FileUploadIconComponent } from './components/file-upload-icon.component';
import { FileUploadAttributeComponent } from './components/file-upload-attr.component';
import { SimpleFileUploadComponent } from './components/simple-file-upload.component';
import { FileSizeValidator, FilesLimitValidator, FilesAcceptValidator } from './directives/validators.directive';
import { FilesAcceptDirective } from './directives/attribute.directive';
export { FileUploadComponent } from './components/file-upload.component';
export { FileUploadIconComponent } from './components/file-upload-icon.component';
export { FileUploadAttributeComponent } from './components/file-upload-attr.component';
export { SimpleFileUploadComponent } from './components/simple-file-upload.component';
export { FileSizeValidator, FilesLimitValidator, FilesAcceptValidator } from './directives/validators.directive';
export { FilesAcceptDirective } from './directives/attribute.directive';
export { FileUploadControl } from './helpers/control.class';
export { FileUploadValidators } from './helpers/validators.class';
export { FileUploadTypes } from './helpers/file-types.class';
export { FileUploadService } from './services/file-upload.service';
export class FileUploadModule {
    /**
     * @param {?} injector
     */
    constructor(injector) {
        this.injector = injector;
        // const fileUploadElement = createCustomElement(FileUploadComponent, { injector });
        // customElements.define('file-upload', fileUploadElement);
    }
    /**
     * @return {?}
     */
    ngDoBootstrap() { }
}
FileUploadModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    ReactiveFormsModule,
                    FormsModule
                ],
                declarations: [
                    FileUploadComponent,
                    FileUploadListItemComponent,
                    FileUploadIconComponent,
                    FileUploadAttributeComponent,
                    FileSizeValidator,
                    FilesLimitValidator,
                    FilesAcceptValidator,
                    FilesAcceptDirective,
                    SimpleFileUploadComponent
                ],
                exports: [
                    FileUploadComponent,
                    FileUploadAttributeComponent,
                    FileUploadIconComponent,
                    FileSizeValidator,
                    FilesLimitValidator,
                    FilesAcceptValidator,
                    FilesAcceptDirective,
                    SimpleFileUploadComponent
                ],
                entryComponents: [
                    FileUploadComponent
                ]
            },] }
];
/** @nocollapse */
FileUploadModule.ctorParameters = () => [
    { type: Injector }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    FileUploadModule.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS11cGxvYWQubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGlwbGFiL25neC1maWxlLXVwbG9hZC8iLCJzb3VyY2VzIjpbImxpYi9maWxlLXVwbG9hZC5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFPQSxPQUFPLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDbEUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRS9DLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQ3pFLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLDhDQUE4QyxDQUFDO0FBQzNGLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLHlDQUF5QyxDQUFDO0FBQ2xGLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLHlDQUF5QyxDQUFDO0FBQ3ZGLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLDJDQUEyQyxDQUFDO0FBRXRGLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxtQkFBbUIsRUFBRSxvQkFBb0IsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQ2pILE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBRXhFLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQ3pFLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLHlDQUF5QyxDQUFDO0FBQ2xGLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLHlDQUF5QyxDQUFDO0FBQ3ZGLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLDJDQUEyQyxDQUFDO0FBQ3RGLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxtQkFBbUIsRUFBRSxvQkFBb0IsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQ2pILE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBRXhFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQzVELE9BQU8sRUFBRSxvQkFBb0IsRUFBaUMsTUFBTSw0QkFBNEIsQ0FBQztBQUNqRyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFFN0QsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFzQ25FLE1BQU0sT0FBTyxnQkFBZ0I7Ozs7SUFFekIsWUFBb0IsUUFBa0I7UUFBbEIsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUNsQyxvRkFBb0Y7UUFDcEYsMkRBQTJEO0lBQy9ELENBQUM7Ozs7SUFFRCxhQUFhLEtBQUksQ0FBQzs7O1lBM0NyQixRQUFRLFNBQUM7Z0JBQ04sT0FBTyxFQUFFO29CQUNMLFlBQVk7b0JBQ1osbUJBQW1CO29CQUNuQixXQUFXO2lCQUNkO2dCQUNELFlBQVksRUFBRTtvQkFDVixtQkFBbUI7b0JBQ25CLDJCQUEyQjtvQkFDM0IsdUJBQXVCO29CQUV2Qiw0QkFBNEI7b0JBRTVCLGlCQUFpQjtvQkFDakIsbUJBQW1CO29CQUNuQixvQkFBb0I7b0JBQ3BCLG9CQUFvQjtvQkFFcEIseUJBQXlCO2lCQUM1QjtnQkFDRCxPQUFPLEVBQUU7b0JBQ0wsbUJBQW1CO29CQUNuQiw0QkFBNEI7b0JBQzVCLHVCQUF1QjtvQkFFdkIsaUJBQWlCO29CQUNqQixtQkFBbUI7b0JBQ25CLG9CQUFvQjtvQkFDcEIsb0JBQW9CO29CQUVwQix5QkFBeUI7aUJBQzVCO2dCQUNELGVBQWUsRUFBRTtvQkFDYixtQkFBbUI7aUJBQ3RCO2FBQ0o7Ozs7WUE3RGtCLFFBQVE7Ozs7Ozs7SUFnRVgsb0NBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiLypcclxuICogbDEwblxyXG4gKlxyXG4gKiBCeSBJdmFuIFBpbnRhciwgaHR0cDovL3d3dy5waW50YXItaXZhbi5jb21cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlXHJcbiAqIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcEl2YW4vZmlsZS11cGxvYWQvYmxvYi9tYXN0ZXIvUkVBRE1FLm1kXHJcbiAqL1xyXG5pbXBvcnQgeyBOZ01vZHVsZSwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgUmVhY3RpdmVGb3Jtc01vZHVsZSwgRm9ybXNNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XHJcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcblxyXG5pbXBvcnQgeyBGaWxlVXBsb2FkQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL2ZpbGUtdXBsb2FkLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IEZpbGVVcGxvYWRMaXN0SXRlbUNvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9maWxlLXVwbG9hZC1saXN0LWl0ZW0uY29tcG9uZW50JztcclxuaW1wb3J0IHsgRmlsZVVwbG9hZEljb25Db21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvZmlsZS11cGxvYWQtaWNvbi5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBGaWxlVXBsb2FkQXR0cmlidXRlQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL2ZpbGUtdXBsb2FkLWF0dHIuY29tcG9uZW50JztcclxuaW1wb3J0IHsgU2ltcGxlRmlsZVVwbG9hZENvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9zaW1wbGUtZmlsZS11cGxvYWQuY29tcG9uZW50JztcclxuXHJcbmltcG9ydCB7IEZpbGVTaXplVmFsaWRhdG9yLCBGaWxlc0xpbWl0VmFsaWRhdG9yLCBGaWxlc0FjY2VwdFZhbGlkYXRvciB9IGZyb20gJy4vZGlyZWN0aXZlcy92YWxpZGF0b3JzLmRpcmVjdGl2ZSc7XHJcbmltcG9ydCB7IEZpbGVzQWNjZXB0RGlyZWN0aXZlIH0gZnJvbSAnLi9kaXJlY3RpdmVzL2F0dHJpYnV0ZS5kaXJlY3RpdmUnO1xyXG5cclxuZXhwb3J0IHsgRmlsZVVwbG9hZENvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9maWxlLXVwbG9hZC5jb21wb25lbnQnO1xyXG5leHBvcnQgeyBGaWxlVXBsb2FkSWNvbkNvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9maWxlLXVwbG9hZC1pY29uLmNvbXBvbmVudCc7XHJcbmV4cG9ydCB7IEZpbGVVcGxvYWRBdHRyaWJ1dGVDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvZmlsZS11cGxvYWQtYXR0ci5jb21wb25lbnQnO1xyXG5leHBvcnQgeyBTaW1wbGVGaWxlVXBsb2FkQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL3NpbXBsZS1maWxlLXVwbG9hZC5jb21wb25lbnQnO1xyXG5leHBvcnQgeyBGaWxlU2l6ZVZhbGlkYXRvciwgRmlsZXNMaW1pdFZhbGlkYXRvciwgRmlsZXNBY2NlcHRWYWxpZGF0b3IgfSBmcm9tICcuL2RpcmVjdGl2ZXMvdmFsaWRhdG9ycy5kaXJlY3RpdmUnO1xyXG5leHBvcnQgeyBGaWxlc0FjY2VwdERpcmVjdGl2ZSB9IGZyb20gJy4vZGlyZWN0aXZlcy9hdHRyaWJ1dGUuZGlyZWN0aXZlJztcclxuXHJcbmV4cG9ydCB7IEZpbGVVcGxvYWRDb250cm9sIH0gZnJvbSAnLi9oZWxwZXJzL2NvbnRyb2wuY2xhc3MnO1xyXG5leHBvcnQgeyBGaWxlVXBsb2FkVmFsaWRhdG9ycywgVmFsaWRhdGlvbkVycm9ycywgVmFsaWRhdG9yRm4gfSBmcm9tICcuL2hlbHBlcnMvdmFsaWRhdG9ycy5jbGFzcyc7XHJcbmV4cG9ydCB7IEZpbGVVcGxvYWRUeXBlcyB9IGZyb20gJy4vaGVscGVycy9maWxlLXR5cGVzLmNsYXNzJztcclxuXHJcbmV4cG9ydCB7IEZpbGVVcGxvYWRTZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2aWNlcy9maWxlLXVwbG9hZC5zZXJ2aWNlJztcclxuXHJcbkBOZ01vZHVsZSh7XHJcbiAgICBpbXBvcnRzOiBbXHJcbiAgICAgICAgQ29tbW9uTW9kdWxlLFxyXG4gICAgICAgIFJlYWN0aXZlRm9ybXNNb2R1bGUsXHJcbiAgICAgICAgRm9ybXNNb2R1bGVcclxuICAgIF0sXHJcbiAgICBkZWNsYXJhdGlvbnM6IFtcclxuICAgICAgICBGaWxlVXBsb2FkQ29tcG9uZW50LFxyXG4gICAgICAgIEZpbGVVcGxvYWRMaXN0SXRlbUNvbXBvbmVudCxcclxuICAgICAgICBGaWxlVXBsb2FkSWNvbkNvbXBvbmVudCxcclxuXHJcbiAgICAgICAgRmlsZVVwbG9hZEF0dHJpYnV0ZUNvbXBvbmVudCxcclxuXHJcbiAgICAgICAgRmlsZVNpemVWYWxpZGF0b3IsXHJcbiAgICAgICAgRmlsZXNMaW1pdFZhbGlkYXRvcixcclxuICAgICAgICBGaWxlc0FjY2VwdFZhbGlkYXRvcixcclxuICAgICAgICBGaWxlc0FjY2VwdERpcmVjdGl2ZSxcclxuXHJcbiAgICAgICAgU2ltcGxlRmlsZVVwbG9hZENvbXBvbmVudFxyXG4gICAgXSxcclxuICAgIGV4cG9ydHM6IFtcclxuICAgICAgICBGaWxlVXBsb2FkQ29tcG9uZW50LFxyXG4gICAgICAgIEZpbGVVcGxvYWRBdHRyaWJ1dGVDb21wb25lbnQsXHJcbiAgICAgICAgRmlsZVVwbG9hZEljb25Db21wb25lbnQsXHJcblxyXG4gICAgICAgIEZpbGVTaXplVmFsaWRhdG9yLFxyXG4gICAgICAgIEZpbGVzTGltaXRWYWxpZGF0b3IsXHJcbiAgICAgICAgRmlsZXNBY2NlcHRWYWxpZGF0b3IsXHJcbiAgICAgICAgRmlsZXNBY2NlcHREaXJlY3RpdmUsXHJcblxyXG4gICAgICAgIFNpbXBsZUZpbGVVcGxvYWRDb21wb25lbnRcclxuICAgIF0sXHJcbiAgICBlbnRyeUNvbXBvbmVudHM6IFtcclxuICAgICAgICBGaWxlVXBsb2FkQ29tcG9uZW50XHJcbiAgICBdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBGaWxlVXBsb2FkTW9kdWxlIHtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGluamVjdG9yOiBJbmplY3Rvcikge1xyXG4gICAgICAgIC8vIGNvbnN0IGZpbGVVcGxvYWRFbGVtZW50ID0gY3JlYXRlQ3VzdG9tRWxlbWVudChGaWxlVXBsb2FkQ29tcG9uZW50LCB7IGluamVjdG9yIH0pO1xyXG4gICAgICAgIC8vIGN1c3RvbUVsZW1lbnRzLmRlZmluZSgnZmlsZS11cGxvYWQnLCBmaWxlVXBsb2FkRWxlbWVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgbmdEb0Jvb3RzdHJhcCgpIHt9XHJcbn1cclxuIl19